<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数组方法reduce</title>
    <link href="/2023/01/20/%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95reduce/"/>
    <url>/2023/01/20/%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95reduce/</url>
    
    <content type="html"><![CDATA[<h2 id="reduce-以下案例摘自mdn"><a href="#reduce-以下案例摘自mdn" class="headerlink" title="reduce(以下案例摘自mdn)"></a>reduce(以下案例摘自mdn)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><br><span class="hljs-comment">// 0 + 1 + 2 + 3 + 4</span><br><span class="hljs-keyword">const</span> initialValue = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">const</span> sumWithInitial = array1.<span class="hljs-title function_">reduce</span>(<br>  <span class="hljs-function">(<span class="hljs-params">accumulator, currentValue</span>) =&gt;</span> accumulator + currentValue,<br>  initialValue<br>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sumWithInitial);<br><span class="hljs-comment">// Expected output: 10</span><br></code></pre></td></tr></table></figure><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>第一个参数为回调，第二个参数为初始值，第二个为可选参数<br><span class="hljs-regexp">//</span><span class="hljs-number">1</span>、无初始值<br><span class="hljs-regexp">//</span>accumulator为数组第一项，从第二项开始遍历，返回值会传到下一次回调中<br><span class="hljs-regexp">//</span><span class="hljs-number">2</span>、有初始值<br><span class="hljs-regexp">//</span>accumulator为设置的初始值，从第一项开始遍历，返回值会传到下一次回调中<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组合并并且去重的方法</title>
    <link href="/2023/01/18/%E6%95%B0%E7%BB%84%E5%90%88%E5%B9%B6%E5%B9%B6%E4%B8%94%E5%8E%BB%E9%87%8D%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2023/01/18/%E6%95%B0%E7%BB%84%E5%90%88%E5%B9%B6%E5%B9%B6%E4%B8%94%E5%8E%BB%E9%87%8D%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">const <span class="hljs-selector-tag">a</span> = <span class="hljs-selector-attr">[1,2,5]</span><br>const <span class="hljs-selector-tag">b</span> = <span class="hljs-selector-attr">[2,3,5,6]</span><br><span class="hljs-comment">//合并a和b并去重</span><br></code></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cos">const c =[<span class="hljs-keyword">new</span> <span class="hljs-keyword">Set</span>([.<span class="hljs-built_in">..a</span>,.<span class="hljs-built_in">..b</span>])]<br>console.log(c)<br><span class="hljs-comment">//[1, 2, 5, 3, 6]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于element-ui里的Drawer的样式问题</title>
    <link href="/2022/11/15/%E5%85%B3%E4%BA%8Eelement-ui%E9%87%8C%E7%9A%84Drawer%E7%9A%84%E6%A0%B7%E5%BC%8F%E9%97%AE%E9%A2%98/"/>
    <url>/2022/11/15/%E5%85%B3%E4%BA%8Eelement-ui%E9%87%8C%E7%9A%84Drawer%E7%9A%84%E6%A0%B7%E5%BC%8F%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="使用抽屉时将抽屉放到了el-table-column的插槽里导致产生奇怪的样式问题"><a href="#使用抽屉时将抽屉放到了el-table-column的插槽里导致产生奇怪的样式问题" class="headerlink" title="使用抽屉时将抽屉放到了el-table-column的插槽里导致产生奇怪的样式问题"></a>使用抽屉时将抽屉放到了el-table-column的插槽里导致产生奇怪的样式问题</h2><p><img src="/img/post_img/element1.png"></p><h2 id="将抽屉放到el-table外部就没有这样的样式了"><a href="#将抽屉放到el-table外部就没有这样的样式了" class="headerlink" title="将抽屉放到el-table外部就没有这样的样式了"></a>将抽屉放到el-table外部就没有这样的样式了</h2><p><img src="/img/post_img/element2.png"></p>]]></content>
    
    
    <categories>
      
      <category>element-ui</category>
      
    </categories>
    
    
    <tags>
      
      <tag>element-ui</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>element-ui导航菜单子菜单获取不到index索引</title>
    <link href="/2022/10/29/element-ui%E5%AF%BC%E8%88%AA%E8%8F%9C%E5%8D%95%E5%AD%90%E8%8F%9C%E5%8D%95%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0index%E7%B4%A2%E5%BC%95/"/>
    <url>/2022/10/29/element-ui%E5%AF%BC%E8%88%AA%E8%8F%9C%E5%8D%95%E5%AD%90%E8%8F%9C%E5%8D%95%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0index%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<h2 id="el-submenu的index属性获取不到v-for中的index值"><a href="#el-submenu的index属性获取不到v-for中的index值" class="headerlink" title="el-submenu的index属性获取不到v-for中的index值"></a>el-submenu的index属性获取不到v-for中的index值</h2><blockquote><p>[Vue warn]Invalid prop:custom validator check failed for prop “index”.</p></blockquote><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><blockquote><p>el-submenu的index属性类型为string&#x2F;null,和v-for中的index类型不同,用toString()转换即可。</p></blockquote><p><img src="/img/post_img/element0.png"></p>]]></content>
    
    
    <categories>
      
      <category>element-ui</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>element-ui</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>清除浮动的解决方案</title>
    <link href="/2022/10/24/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2022/10/24/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h2 id="清除浮动造成的父元素高度塌陷"><a href="#清除浮动造成的父元素高度塌陷" class="headerlink" title="清除浮动造成的父元素高度塌陷"></a>清除浮动造成的父元素高度塌陷</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.article-container</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>    <span class="hljs-comment">/*伪元素是行内元素 正常浏览器清除浮动方法*/</span><br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">clear</span>: both;<br>    <span class="hljs-attribute">visibility</span>: hidden;<br>  &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于nodejs使用axios发送请求返回中文乱码问题</title>
    <link href="/2022/10/13/%E5%85%B3%E4%BA%8Enodejs%E4%BD%BF%E7%94%A8axios%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <url>/2022/10/13/%E5%85%B3%E4%BA%8Enodejs%E4%BD%BF%E7%94%A8axios%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>在浏览器直接请求太平洋的ip查询接口返回结果正常，但是在nodejs中返回的中文结果为乱码。</p></blockquote><p><img src="/img/post_img/node0.png"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote><p>下载iconv-lite模块，对接受结果进行转码。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> iconv = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;iconv-lite&quot;</span>)<br><br><span class="hljs-title function_">axios</span>(&#123;<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://whois.pconline.com.cn/ipJson.jsp?ip=6.6.3.44&amp;json=true&quot;</span>,<br>        <span class="hljs-attr">responseType</span>: <span class="hljs-string">&quot;arraybuffer&quot;</span> <span class="hljs-comment">//添加配置</span><br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">ret</span> =&gt;</span> &#123;<br>        <span class="hljs-comment">//以下</span><br>        <span class="hljs-keyword">var</span> cityInfo = iconv.<span class="hljs-title function_">decode</span>(ret.<span class="hljs-property">data</span>, <span class="hljs-string">&#x27;gbk&#x27;</span>);<br>        cityInfo=<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(cityInfo)<br>        <span class="hljs-comment">//以上</span><br>        res.<span class="hljs-title function_">json</span>(&#123;<br>            <span class="hljs-attr">code</span>: <span class="hljs-number">200</span>,<br>            <span class="hljs-attr">city</span>:cityInfo.<span class="hljs-property">addr</span><br>        &#125;)<br>    &#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>node</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
      <tag>axios</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>导入springboot的pom.xml时 提示异常</title>
    <link href="/2022/10/03/%E5%AF%BC%E5%85%A5springboot%E7%9A%84pom-xml%E6%97%B6-%E6%8F%90%E7%A4%BA%E5%BC%82%E5%B8%B8/"/>
    <url>/2022/10/03/%E5%AF%BC%E5%85%A5springboot%E7%9A%84pom-xml%E6%97%B6-%E6%8F%90%E7%A4%BA%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>spring官网生成配置文件，粘贴到项目中时，idea报错 “Plugin ‘org.springframework.boot:spring-boot-maven-plugin:‘ not found”。</p></blockquote><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote><p>找到配置文件中的parent标签,复制关于version的一行,添加到插件标签中。</p></blockquote><p><img src="/img/post_img/java0.png"></p><p><img src="/img/post_img/java1.png"></p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录一下关于vue2对象属性的添加以及通过数组下标修改值的问题</title>
    <link href="/2022/09/21/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%85%B3%E4%BA%8Evue2%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E7%9A%84%E6%B7%BB%E5%8A%A0%E4%BB%A5%E5%8F%8A%E9%80%9A%E8%BF%87%E6%95%B0%E7%BB%84%E4%B8%8B%E6%A0%87%E4%BF%AE%E6%94%B9%E5%80%BC%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/09/21/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%85%B3%E4%BA%8Evue2%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E7%9A%84%E6%B7%BB%E5%8A%A0%E4%BB%A5%E5%8F%8A%E9%80%9A%E8%BF%87%E6%95%B0%E7%BB%84%E4%B8%8B%E6%A0%87%E4%BF%AE%E6%94%B9%E5%80%BC%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>可以通过this.$set(或Vue.set)方法进行添加或修改。<br>但是对其中的一个属性使用$set()后，其他的属性没有用$set()却也可以在页面更新。</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">this</span>.person.sex=<span class="hljs-string">&#x27;女&#x27;</span><br><span class="hljs-keyword">this</span>.person.job=<span class="hljs-string">&#x27;学生&#x27;</span><br><span class="hljs-keyword">this</span>.$<span class="hljs-keyword">set</span>(<span class="hljs-keyword">this</span>.person.hobby,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;睡觉&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h2><h3 id="修改前"><a href="#修改前" class="headerlink" title="修改前"></a>修改前</h3><p><img src="/img/post_img/vue5.png"></p><h3 id="修改后"><a href="#修改后" class="headerlink" title="修改后"></a>修改后</h3><p><img src="/img/post_img/vue6.png"></p><blockquote><p>person.sex和person.job没有通过$set()修改但页面也更新了。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于vue嵌套路由更新引起父组件更新的问题</title>
    <link href="/2022/09/16/%E5%85%B3%E4%BA%8Evue%E5%B5%8C%E5%A5%97%E8%B7%AF%E7%94%B1%E6%9B%B4%E6%96%B0%E5%BC%95%E8%B5%B7%E7%88%B6%E7%BB%84%E4%BB%B6%E6%9B%B4%E6%96%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/09/16/%E5%85%B3%E4%BA%8Evue%E5%B5%8C%E5%A5%97%E8%B7%AF%E7%94%B1%E6%9B%B4%E6%96%B0%E5%BC%95%E8%B5%B7%E7%88%B6%E7%BB%84%E4%BB%B6%E6%9B%B4%E6%96%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>通过this.$router.push()切换子路由，路由切换后会导致父组件重新挂载。</p></blockquote><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><blockquote><p>router-view的key值不同时，父组件会重新挂载。<br>key值相同时，父组件被复用。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fixBug</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于腾讯云轻量级应用开放端口遇到的问题</title>
    <link href="/2022/09/09/%E5%85%B3%E4%BA%8E%E8%85%BE%E8%AE%AF%E4%BA%91%E8%BD%BB%E9%87%8F%E7%BA%A7%E5%BA%94%E7%94%A8%E5%BC%80%E6%94%BE%E7%AB%AF%E5%8F%A3%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/09/09/%E5%85%B3%E4%BA%8E%E8%85%BE%E8%AE%AF%E4%BA%91%E8%BD%BB%E9%87%8F%E7%BA%A7%E5%BA%94%E7%94%A8%E5%BC%80%E6%94%BE%E7%AB%AF%E5%8F%A3%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="关于轻量级应用开放端口遇到的问题"><a href="#关于轻量级应用开放端口遇到的问题" class="headerlink" title="关于轻量级应用开放端口遇到的问题"></a>关于轻量级应用开放端口遇到的问题</h2><blockquote><p>在安全组开放时发现并没有关联应用，尝试添加关联应用也添加不了。其实轻量级应用之间在防火墙开放端口就行了，不用设置安全组（恼）。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>线上部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>腾讯云</tag>
      
      <tag>项目部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在用户使用的过程中token过期了怎么办</title>
    <link href="/2022/09/02/%E5%9C%A8%E7%94%A8%E6%88%B7%E4%BD%BF%E7%94%A8%E7%9A%84%E8%BF%87%E7%A8%8B%E4%B8%ADtoken%E8%BF%87%E6%9C%9F%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/"/>
    <url>/2022/09/02/%E5%9C%A8%E7%94%A8%E6%88%B7%E4%BD%BF%E7%94%A8%E7%9A%84%E8%BF%87%E7%A8%8B%E4%B8%ADtoken%E8%BF%87%E6%9C%9F%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="token过期的解决方案"><a href="#token过期的解决方案" class="headerlink" title="token过期的解决方案"></a>token过期的解决方案</h2><blockquote><p>解决这种问题的方案可能有很多，这里主要记录两种。</p></blockquote><h3 id="单token"><a href="#单token" class="headerlink" title="单token"></a>单token</h3><blockquote><p>规定一个时间间隔，当距离上次登录在指定间隔内，token如果没过期，则正常发送请求，如果token过期，则向后端发起刷新token请求，前端获取到新的token后再次向后端发起请求；当距离上次登录时间间隔超过指定时间，后端拒绝刷新token请求，前端返回登录界面。</p></blockquote><h3 id="双token"><a href="#双token" class="headerlink" title="双token"></a>双token</h3><blockquote><p>登录后返回两个token，一个过期时间长，一个过期时间短。正常情况下用时间短的token，如果时间短的token过期了，则用时间长的token请求刷新token。后端再次返回两个过期时间一长一短的token，前端再次用过期时间短的token发起请求。如果长时间未登录，两个token都过期，则需要重新登录。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>node</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
      <tag>js</tag>
      
      <tag>token</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于使用postman测试接口提示jwt过期</title>
    <link href="/2022/08/15/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8postman%E6%B5%8B%E8%AF%95%E6%8E%A5%E5%8F%A3%E6%8F%90%E7%A4%BAjwt%E8%BF%87%E6%9C%9F/"/>
    <url>/2022/08/15/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8postman%E6%B5%8B%E8%AF%95%E6%8E%A5%E5%8F%A3%E6%8F%90%E7%A4%BAjwt%E8%BF%87%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>今天在测试之前写的一些接口的时候，一直返回401，后台提示jwt expired（jwt过期）。</p></blockquote><h2 id="引起问题的原因"><a href="#引起问题的原因" class="headerlink" title="引起问题的原因"></a>引起问题的原因</h2><blockquote><p>在postman的collections添加了Authorization之后，发起的请求会自动添加一些内容到header或query params中(便于测试)，优先级高于具体请求内的headers参数。<br><br>当时在postman配置了token相关信息到Authorization中，今天在测试接口的时候又在headers中添加了token信息，提示jwt过期，原因是在postman配置的是之前的token信息，已经过期了，但是他的优先级高于在具体请求内添加的信息，所以提示jwt过期。</p></blockquote><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote><p>更新Authorization中的token信息或者关掉Authorization功能。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>node</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>node</tag>
      
      <tag>postman</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js短路运算</title>
    <link href="/2022/08/09/js%E7%9F%AD%E8%B7%AF%E8%BF%90%E7%AE%97/"/>
    <url>/2022/08/09/js%E7%9F%AD%E8%B7%AF%E8%BF%90%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h2 id="短路运算符"><a href="#短路运算符" class="headerlink" title="短路运算符"></a>短路运算符</h2><h3 id="1-短路运算符-amp-amp"><a href="#1-短路运算符-amp-amp" class="headerlink" title="1.短路运算符&amp;&amp;"></a>1.短路运算符&amp;&amp;</h3><blockquote><p>当&amp;&amp;左边为真时，则返回右边的值（不管右边的值是真还是假）;</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-number">2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><blockquote><p>当&amp;&amp;左边为假时，返回左边的值，当&amp;&amp;的左边为 null&#x2F;NaN&#x2F;undefined ，结果就会得到null&#x2F;NaN&#x2F;undefined。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-literal">false</span> &amp;&amp; <span class="hljs-number">2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// false</span><br><br><span class="hljs-keyword">let</span> a = <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-number">2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">//null</span><br></code></pre></td></tr></table></figure><h3 id="2-短路运算符"><a href="#2-短路运算符" class="headerlink" title="2.短路运算符||"></a>2.短路运算符||</h3><blockquote><p>当||左边为假时，返回右边的值（不管右边的值是真还是假）。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-literal">false</span> || <span class="hljs-number">2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><blockquote><p>当||左边为真时，返回左边的值;</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span> || <span class="hljs-number">2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><blockquote><p>两边都是是null&#x2F;NaN&#x2F;undefined，返回null&#x2F;NaN&#x2F;undefined。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-literal">null</span> || <span class="hljs-literal">null</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// null</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-element-admin依赖安装失败</title>
    <link href="/2022/08/05/vue-element-admin%E4%BE%9D%E8%B5%96%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5/"/>
    <url>/2022/08/05/vue-element-admin%E4%BE%9D%E8%B5%96%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="克隆vue-element-admin后npm-i下载依赖失败"><a href="#克隆vue-element-admin后npm-i下载依赖失败" class="headerlink" title="克隆vue-element-admin后npm i下载依赖失败"></a>克隆vue-element-admin后npm i下载依赖失败</h2><p><img src="/img/post_img/vue1.png"></p><blockquote><p>使用npm，cnpm，yarn下载依赖都会失败，cnpm的报错信息可能更详细一些，会提示是由哪个包造成的</p></blockquote><p><img src="/img/post_img/vue3.png"></p><blockquote><p>下载失败的原因是由一个叫做<code>tui-editor</code>的包引起的。</p></blockquote><p><img src="/img/post_img/vue2.png"></p><hr><h2 id="通过查看官方文档，发现这个包需要换成另外一个包-toast-ui-editor-可能是package-json没有及时更新，上次更新时间是20年"><a href="#通过查看官方文档，发现这个包需要换成另外一个包-toast-ui-editor-可能是package-json没有及时更新，上次更新时间是20年" class="headerlink" title="通过查看官方文档，发现这个包需要换成另外一个包@toast-ui/editor,可能是package.json没有及时更新，上次更新时间是20年"></a>通过查看官方文档，发现这个包需要换成另外一个包<code>@toast-ui/editor</code>,可能是package.json没有及时更新，上次更新时间是20年</h2><h2 id="具体解决方法有以下两种："><a href="#具体解决方法有以下两种：" class="headerlink" title="具体解决方法有以下两种："></a>具体解决方法有以下两种：</h2><h3 id="1-删除MarkdownEditor组件"><a href="#1-删除MarkdownEditor组件" class="headerlink" title="1.删除MarkdownEditor组件"></a>1.删除MarkdownEditor组件</h3><blockquote><p>将package.json中的<code>tui-editor</code>删除，将<code>/src/components/MarkdownEditor</code>删除，将<code>/views/components-demo/markdown.vue</code>删除，然后<code>npm i</code>安装依赖，<code>npm run dev</code>启动项目即可。</p></blockquote><h3 id="2-如果希望保留MarkdownEditor组件的话（markdown编辑器）-可以参考以下方法"><a href="#2-如果希望保留MarkdownEditor组件的话（markdown编辑器）-可以参考以下方法" class="headerlink" title="2.如果希望保留MarkdownEditor组件的话（markdown编辑器）,可以参考以下方法"></a>2.如果希望保留MarkdownEditor组件的话（markdown编辑器）,可以参考以下方法</h3><blockquote><p>将<code>/src/components/MarkdownEditor/index.vue</code>中的内容改为以下(需要改一些小细节，可以直接粘下面的):</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">&lt;template&gt;<br>  &lt;div :id=<span class="hljs-string">&quot;id&quot;</span>&gt;&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;codemirror/lib/codemirror.css&#x27;</span> <span class="hljs-comment">// Editor&#x27;s Dependency Style</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;@toast-ui/editor/dist/toastui-editor.css&#x27;</span> <span class="hljs-comment">// Editor&#x27;s Style</span><br><span class="hljs-keyword">import</span> Editor from <span class="hljs-string">&#x27;@toast-ui/editor&#x27;</span><br><span class="hljs-keyword">import</span> defaultOptions from <span class="hljs-string">&#x27;./default-options&#x27;</span><br><br>export default &#123;<br>  name: <span class="hljs-string">&#x27;MarkdownEditor&#x27;</span>,<br>  props: &#123;<br>    value: &#123;<br>      type: String,<br>      default: <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;,<br>    id: &#123;<br>      type: String,<br>      required: <span class="hljs-literal">false</span>,<br>      default() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;markdown-editor-&#x27;</span> + +new Date() + ((Math.random() * <span class="hljs-number">1000</span>).toFixed(<span class="hljs-number">0</span>) + <span class="hljs-string">&#x27;&#x27;</span>)<br>      &#125;<br>    &#125;,<br>    options: &#123;<br>      type: Object,<br>      default() &#123;<br>        <span class="hljs-keyword">return</span> defaultOptions<br>      &#125;<br>    &#125;,<br>    mode: &#123;<br>      type: String,<br>      default: <span class="hljs-string">&#x27;markdown&#x27;</span><br>    &#125;,<br>    height: &#123;<br>      type: String,<br>      required: <span class="hljs-literal">false</span>,<br>      default: <span class="hljs-string">&#x27;300px&#x27;</span><br>    &#125;,<br>    language: &#123;<br>      type: String,<br>      required: <span class="hljs-literal">false</span>,<br>      default: <span class="hljs-string">&#x27;en_US&#x27;</span> <span class="hljs-comment">// https://github.com/nhnent/tui.editor/tree/master/src/js/langs</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-keyword">data</span>() &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      editor: <span class="hljs-literal">null</span><br>    &#125;<br>  &#125;,<br>  computed: &#123;<br>    editorOptions() &#123;<br>      <span class="hljs-keyword">const</span> options = Object.assign(&#123;&#125;, defaultOptions, <span class="hljs-keyword">this</span>.options)<br>      options.initialEditType = <span class="hljs-keyword">this</span>.mode<br>      options.height = <span class="hljs-keyword">this</span>.height<br>      options.language = <span class="hljs-keyword">this</span>.language<br>      <span class="hljs-keyword">return</span> options<br>    &#125;<br>  &#125;,<br>  watch: &#123;<br>    value(newValue, preValue) &#123;<br>      <span class="hljs-keyword">if</span> (newValue !== preValue &amp;&amp; newValue !== <span class="hljs-keyword">this</span>.editor.getMarkdown()) &#123;<br>        <span class="hljs-keyword">this</span>.editor.setMarkdown(newValue)<br>      &#125;<br>    &#125;,<br>    language(<span class="hljs-keyword">val</span>) &#123;<br>      <span class="hljs-keyword">this</span>.destroyEditor()<br>      <span class="hljs-keyword">this</span>.initEditor()<br>    &#125;,<br>    height(newValue) &#123;<br>      <span class="hljs-keyword">this</span>.editor.height(newValue)<br>    &#125;,<br>    mode(newValue) &#123;<br>      <span class="hljs-keyword">this</span>.editor.changeMode(newValue)<br>    &#125;<br>  &#125;,<br>  mounted() &#123;<br>    <span class="hljs-keyword">this</span>.initEditor()<br>  &#125;,<br>  destroyed() &#123;<br>    <span class="hljs-keyword">this</span>.destroyEditor()<br>  &#125;,<br>  methods: &#123;<br>    initEditor() &#123;<br>      <span class="hljs-keyword">this</span>.editor = new Editor(&#123;<br>        el: document.getElementById(<span class="hljs-keyword">this</span>.id),<br>        ...<span class="hljs-keyword">this</span>.editorOptions<br>      &#125;)<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.value) &#123;<br>        <span class="hljs-keyword">this</span>.editor.setMarkdown(<span class="hljs-keyword">this</span>.value)<br>      &#125;<br>      <span class="hljs-keyword">this</span>.editor.on(<span class="hljs-string">&#x27;change&#x27;</span>, () =&gt; &#123;<br>        <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">&#x27;input&#x27;</span>, <span class="hljs-keyword">this</span>.editor.getMarkdown())<br>      &#125;)<br>    &#125;,<br>    destroyEditor() &#123;<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.editor) <span class="hljs-keyword">return</span><br>      <span class="hljs-keyword">this</span>.editor.off(<span class="hljs-string">&#x27;change&#x27;</span>)<br>      <span class="hljs-keyword">this</span>.editor.remove()<br>    &#125;,<br>    setValue(value) &#123;<br>      <span class="hljs-keyword">this</span>.editor.setMarkdown(value)<br>    &#125;,<br>    getValue() &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.editor.getMarkdown()<br>    &#125;,<br>    setHtml(value) &#123;<br>      <span class="hljs-keyword">this</span>.editor.setHtml(value)<br>    &#125;,<br>    getHtml() &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.editor.getHtml()<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><h4 id="先安装-toast-ui-editor-安装2-0中较稳定的版本"><a href="#先安装-toast-ui-editor-安装2-0中较稳定的版本" class="headerlink" title="先安装@toast-ui/editor(安装2.0中较稳定的版本)"></a>先安装<code>@toast-ui/editor</code>(安装2.0中较稳定的版本)</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">npm <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">@toast-ui</span>/editor<span class="hljs-keyword">@2</span><br></code></pre></td></tr></table></figure><h4 id="然后npm-i-安装依赖"><a href="#然后npm-i-安装依赖" class="headerlink" title="然后npm i 安装依赖"></a>然后npm i 安装依赖</h4><blockquote><p>安装完之后<code>npm run dev</code>项目就可以跑起来了</p></blockquote><p><img src="/img/post_img/vue4.png"></p><h2 id="完结撒花-⸜-•ᴗ•-⸝"><a href="#完结撒花-⸜-•ᴗ•-⸝" class="headerlink" title="完结撒花 *⸜( •ᴗ• )⸝*"></a>完结撒花 *⸜( •ᴗ• )⸝*</h2><blockquote><p>有问题联系我</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fixBug</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git push的两种情况</title>
    <link href="/2022/08/04/%E5%85%B3%E4%BA%8Egit-push-%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%83%85%E5%86%B5/"/>
    <url>/2022/08/04/%E5%85%B3%E4%BA%8Egit-push-%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%83%85%E5%86%B5/</url>
    
    <content type="html"><![CDATA[<h2 id="1-将项目克隆到本地"><a href="#1-将项目克隆到本地" class="headerlink" title="1.将项目克隆到本地"></a>1.将项目克隆到本地</h2><blockquote><p>当线上项目已经建立，将代码克隆到本地时，git会自动为仓库地址起别名(origin)，可以直接git push提交。</p></blockquote><h2 id="2-将本地已有项目提交到远程仓库"><a href="#2-将本地已有项目提交到远程仓库" class="headerlink" title="2.将本地已有项目提交到远程仓库"></a>2.将本地已有项目提交到远程仓库</h2><blockquote><p>当本地项目已经有部分内容，线上项目为空时，git push时git不知道向哪儿提交，需要给仓库地址起别名，git remote add 别名 仓库地址，提交代码时使用命令git push 别名 分支名；如果需要省略git push后面的内容，则需要做以下设置：git push –set-upstream 别名 分支名。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>es6块级作用域</title>
    <link href="/2022/08/04/es6%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <url>/2022/08/04/es6%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="为什么需要块级作用域，以及没有块级作用域会出现的问题"><a href="#为什么需要块级作用域，以及没有块级作用域会出现的问题" class="headerlink" title="为什么需要块级作用域，以及没有块级作用域会出现的问题"></a>为什么需要块级作用域，以及没有块级作用域会出现的问题</h2><blockquote><p>ES5 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。</p></blockquote><h3 id="第一种场景，内层变量可能会覆盖外层变量。"><a href="#第一种场景，内层变量可能会覆盖外层变量。" class="headerlink" title="第一种场景，内层变量可能会覆盖外层变量。"></a>第一种场景，内层变量可能会覆盖外层变量。</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> tmp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(tmp)<br>  <span class="hljs-keyword">if</span> (<span class="hljs-literal">false</span>) &#123;<br>    <span class="hljs-keyword">var</span> tmp = <span class="hljs-string">&#x27;hello world&#x27;</span><br>  &#125;<br>&#125;<br><br>f(); <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><blockquote><p>在函数内使用变量时，会先在函数内部寻找变量，内部没有的话再到外层寻找，直到寻找到全局作用域为止。<br>在上面的示例中，由于var声明的变量存在变量提升的问题，所以当执行到<code>console.log(tmp)</code>时，会输出undefined。</p></blockquote><h3 id="第二种场景，用来计数的循环变量泄露为全局变量。"><a href="#第二种场景，用来计数的循环变量泄露为全局变量。" class="headerlink" title="第二种场景，用来计数的循环变量泄露为全局变量。"></a>第二种场景，用来计数的循环变量泄露为全局变量。</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> s = <span class="hljs-string">&#x27;hello&#x27;</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">length</span>; i++) &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(s[i])<br>&#125;<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(i) <span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></figure><blockquote><p>上面代码中，变量i只用来控制循环，但是循环结束后，它并没有消失，泄露成了全局变量。</p></blockquote><h3 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h3><blockquote><p>for循环和if判断并不是一个函数体，不存在函数作用域。在for和if中定义的变量所处的作用域就是for和if所在的作用域。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>块级作用域</tag>
      
      <tag>let</tag>
      
      <tag>变量提升</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown常用语法</title>
    <link href="/2022/07/31/markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
    <url>/2022/07/31/markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h2><blockquote><p>Markdown一共有六级标题，就相当于html中的H1，H2， H3 … H6，在Markdown中在文字前面加上1-6个#号，然后再加上一个空格依次表示是几级标题。</p></blockquote><h3 id="语法：-一级标题h1-二级标题h1-…以此类推。"><a href="#语法：-一级标题h1-二级标题h1-…以此类推。" class="headerlink" title="语法：#一级标题h1 ##二级标题h1 …以此类推。"></a>语法：#一级标题h1 ##二级标题h1 …以此类推。</h3><blockquote><p>需要注意的是，#后面需要加空格，否则判定为普通字符。</p></blockquote><h2 id="2-斜体"><a href="#2-斜体" class="headerlink" title="2.斜体"></a>2.斜体</h2><blockquote><p>在内容的初始位置和结束位置各加一个*即可</p></blockquote><h3 id="语法：-你看我变斜了没？"><a href="#语法：-你看我变斜了没？" class="headerlink" title="语法： *你看我变斜了没？ *"></a>语法： *你看我变斜了没？ *</h3><h3 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h3><blockquote><p><em>你看我变斜了没？</em></p></blockquote><h2 id="3-粗体"><a href="#3-粗体" class="headerlink" title="3.粗体"></a>3.粗体</h2><blockquote><p>字体加粗只需要在文字首尾分别加上两个星号（**）即可。</p></blockquote><h3 id="语法：-加粗了吧？"><a href="#语法：-加粗了吧？" class="headerlink" title="语法： **加粗了吧？ **"></a>语法： **加粗了吧？ **</h3><h3 id="效果如下-1"><a href="#效果如下-1" class="headerlink" title="效果如下"></a>效果如下</h3><blockquote><p><strong>加粗了吧？</strong></p></blockquote><h2 id="4-删除线"><a href="#4-删除线" class="headerlink" title="4.删除线"></a>4.删除线</h2><blockquote><p>需要让文字从中间划上一横删除线，只需要在文字首尾分别加上两个波浪线符号~~即可。</p></blockquote><h3 id="语法：～～删掉了～～"><a href="#语法：～～删掉了～～" class="headerlink" title="语法：～～删掉了～～"></a>语法：～～删掉了～～</h3><h3 id="效果如下-2"><a href="#效果如下-2" class="headerlink" title="效果如下"></a>效果如下</h3><blockquote><p><del>删掉了</del></p></blockquote><h2 id="5-换行"><a href="#5-换行" class="headerlink" title="5.换行"></a>5.换行</h2><blockquote><p>一行文字需要换行，只需要在行末尾回车换行</p></blockquote><h3 id="语法：第一行-直接enter-第二行"><a href="#语法：第一行-直接enter-第二行" class="headerlink" title="语法：第一行 直接enter 第二行"></a>语法：第一行 直接enter 第二行</h3><h3 id="效果如下-3"><a href="#效果如下-3" class="headerlink" title="效果如下"></a>效果如下</h3><blockquote><p>第一行<br>第二行</p></blockquote><h2 id="6-列表"><a href="#6-列表" class="headerlink" title="6.列表"></a>6.列表</h2><blockquote><p>列表分为有序列表和无序列表，有序列表只需要在文字前面加上“n.空格（n为任意整数）”即可，这里并不关心多个列表之间整数n的顺序性，只要是整数就行。无序列表只需要在文字前面加上“(标识符)空格”即可。 标识符可以是*，-，+。</p></blockquote><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><blockquote><ul><li>1 </li><li>2</li><li>3</li></ul></blockquote><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><blockquote><ol><li>1 </li><li>2</li><li>3<br>需要注意的是：有序列表前只需加“数字加点”就行,如<code>1.列表项内容</code> <code>1.列表项内容</code> <code>1.列表项内容</code></li></ol></blockquote><h2 id="7-分割线"><a href="#7-分割线" class="headerlink" title="7.分割线"></a>7.分割线</h2><blockquote><p>三个及三个以上的-即可显示出一个分割线(当前行不能有其他文字或符号)。</p></blockquote><h3 id="语法：-1"><a href="#语法：-1" class="headerlink" title="语法：- - -"></a>语法：- - -</h3><h3 id="效果如下-4"><a href="#效果如下-4" class="headerlink" title="效果如下"></a>效果如下</h3><hr><h2 id="8-高亮"><a href="#8-高亮" class="headerlink" title="8.高亮"></a>8.高亮</h2><blockquote><p>一般在插入代码时使用高亮，使用一对任意个数的<code>`</code> 将代码包裹即可</p></blockquote><h3 id="效果如下-5"><a href="#效果如下-5" class="headerlink" title="效果如下"></a>效果如下</h3><p><code>我高亮了</code></p><h2 id="9-代码块"><a href="#9-代码块" class="headerlink" title="9.代码块"></a>9.代码块</h2><blockquote><p>和高亮语法类似，用一对<code>```</code>将代码包裹，并且需要换行。如果需要换行直接回车，缩进可以直接使用tab键。</p></blockquote><h3 id="效果如下-6"><a href="#效果如下-6" class="headerlink" title="效果如下"></a>效果如下</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">1212</span><br></code></pre></td></tr></table></figure><h2 id="10-引用"><a href="#10-引用" class="headerlink" title="10.引用"></a>10.引用</h2><blockquote><p>使用大于号即可实现引用。如果多级引用则可以通过增加&gt;的个数实现，中间需要进行回车。<br>语法：&gt; 第一级引用 &gt; 第二级引用</p></blockquote><h3 id="效果如下-7"><a href="#效果如下-7" class="headerlink" title="效果如下"></a>效果如下</h3><blockquote><p>第一级引用 </p><blockquote><p>第二级引用</p><blockquote><p>第三级引用</p></blockquote></blockquote></blockquote><h2 id="11-表格"><a href="#11-表格" class="headerlink" title="11.表格"></a>11.表格</h2><blockquote><ol><li>|和|之间形成单元格。</li><li>第一行为表头，内容默认加粗居中。</li><li>第二行-和：组合，标记本列单元格对齐方式。无:号，为默认左对齐；两端:为居中；左、右其中一端:向该 侧对齐。</li><li>其余行为普通单元格。</li><li>注意：（1）第二行不可省略，否则语法不完整；（2）表格必须为整段（或者用—封顶），中间不能有空行。</li><li>语法<br>|表头第一列|表头第二列|表头第三列<br>|—————|:————-:|————–:|<br>|表项第一列|表项第二列|表项第三列|<br>|默认居左|居中|居右|</li></ol></blockquote><h3 id="效果如下-8"><a href="#效果如下-8" class="headerlink" title="效果如下"></a>效果如下</h3><blockquote><table><thead><tr><th>表头第一列</th><th align="center">表头第二列</th><th align="right">表头第三列</th></tr></thead><tbody><tr><td>表项第一列</td><td align="center">表项第二列</td><td align="right">表项第三列</td></tr><tr><td>默认居左</td><td align="center">居中</td><td align="right">居右</td></tr></tbody></table></blockquote><h2 id="12-脚注"><a href="#12-脚注" class="headerlink" title="12.脚注"></a>12.脚注</h2><blockquote><p>语法标记：[^1 ]+[^1 ]:注释内容（[ ^1 ]是角标，[ ^1 ]:注释内容是对应的注释列表，必须一一对应）<br>解说：写文章时，不可避免要用到读者陌生的词汇或典故，就地解释会把文风带偏，不作说明显然治学不严，脚注为此而生。<br>语法：<br>我今天开通了简书[^9 ]，我把脚注放在了文章末尾。<br>[ ^9]:简书：创作你的创作。</p></blockquote><h3 id="效果如下-9"><a href="#效果如下-9" class="headerlink" title="效果如下"></a>效果如下</h3><blockquote><p>我把脚注放到了文章末尾<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="welcome to my blog">[1]</span></a></sup></p></blockquote><h2 id="13-超链接"><a href="#13-超链接" class="headerlink" title="13.超链接"></a>13.超链接</h2><blockquote><p>使用中括号[]内部写显示在网页上的文本，紧接着用英文半角()，内部写两个参数，第一个是链接的实际地址(可以是远程url或者本地地址)，第二个参数用双引号包裹，与实际地址以空格分开，双引号内的内容可以省略，为鼠标悬浮时候的说明。<br>语法：[百度](<a href="https://www.baidu.com/">https://www.baidu.com/</a> ‘百度一下’）<br>注意：<br>超链接分为内联和引用两种方式：<br>内联方式，满足一般使用需求，直观方便，即用即写。 语法就是上边介绍的。<br>引用方式，适合添加多个网址的文章，可以避免在正文中出现大量网址，保持编辑可读性；也适合同一网址多处引用，当网址有改动或修改时，只需修改列表即可，无需逐个修改，类似宏定义。<br>语法：<br>看电影[点这里][序号1]<br>看图片[点这里][序号2]<br>看美女[点这里][序号3]<br>我还要看电影[点这里][序号1]</p></blockquote><!-- 以下三行内容作为引用值，不显示  --><h3 id="内联"><a href="#内联" class="headerlink" title="内联"></a>内联</h3><blockquote><p><a href="https://www.baidu.com/" title="百度">百度</a></p></blockquote><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><blockquote><p>看电影<a href="https://www.douban.com/" title="douban">点这里</a><br>看平面设计<a href="http://huaban.com/" title="huaban">点这里</a></p></blockquote><h2 id="14-图片"><a href="#14-图片" class="headerlink" title="14.图片"></a>14.图片</h2><blockquote><p>也分为内联方式和引用方式，语法同超链接的类似，只需要在最前面加上！即可。<br>语法：<br>![图片] (地址 ）<br>[xxx]: 地址<br>![图片][xxx]</p></blockquote><h3 id="内联-1"><a href="#内联-1" class="headerlink" title="内联"></a>内联</h3><blockquote><p><img src="https://avatars.githubusercontent.com/u/97815660?v=4" alt="图片"></p></blockquote><h3 id="引用-1"><a href="#引用-1" class="headerlink" title="引用"></a>引用</h3><blockquote><p><img src="https://avatars.githubusercontent.com/u/97815660?v=4" alt="图片"></p></blockquote><h2 id="15-超链接发邮件"><a href="#15-超链接发邮件" class="headerlink" title="15.超链接发邮件"></a>15.超链接发邮件</h2><blockquote><p>在一对尖括号&lt;&gt;内放入邮箱地址。<br>语法：&lt; <a href="mailto:&#x31;&#52;&#57;&#55;&#54;&#x38;&#57;&#50;&#x35;&#56;&#x40;&#113;&#113;&#x2e;&#x63;&#x6f;&#109;">&#x31;&#52;&#57;&#55;&#54;&#x38;&#57;&#50;&#x35;&#56;&#x40;&#113;&#113;&#x2e;&#x63;&#x6f;&#109;</a> &gt;</p></blockquote><h3 id="效果如下-10"><a href="#效果如下-10" class="headerlink" title="效果如下"></a>效果如下</h3><blockquote><p><a href="mailto:&#49;&#52;&#x39;&#x37;&#54;&#x38;&#x39;&#x32;&#53;&#56;&#64;&#113;&#x71;&#46;&#99;&#111;&#x6d;">&#49;&#52;&#x39;&#x37;&#54;&#x38;&#x39;&#x32;&#53;&#56;&#64;&#113;&#x71;&#46;&#99;&#111;&#x6d;</a></p></blockquote><h2 id="16-反斜杠"><a href="#16-反斜杠" class="headerlink" title="16.反斜杠"></a>16.反斜杠</h2><blockquote><p>使用\表示反斜杠，相当于反转义作用。在你不想显示Markdown标记时可以使用反斜杠。</p></blockquote><hr><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>welcome to my blog<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>markdown语法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css子元素和父元素margin重叠</title>
    <link href="/2022/07/31/css%E5%AD%90%E5%85%83%E7%B4%A0%E5%92%8C%E7%88%B6%E5%85%83%E7%B4%A0margin%E9%87%8D%E5%8F%A0/"/>
    <url>/2022/07/31/css%E5%AD%90%E5%85%83%E7%B4%A0%E5%92%8C%E7%88%B6%E5%85%83%E7%B4%A0margin%E9%87%8D%E5%8F%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="子元素和父元素共享margin"><a href="#子元素和父元素共享margin" class="headerlink" title="子元素和父元素共享margin"></a>子元素和父元素共享margin</h2><blockquote><p>有时会出现子元素和父元素共享外边距的情况，如下图，父元素并没有设置上外边距，但是随着子元素一起移动了</p></blockquote><div align=center><img src="/img/post_img/css0.png" width="200"></div><h3 id="解决方法有多种，例如："><a href="#解决方法有多种，例如：" class="headerlink" title="解决方法有多种，例如："></a>解决方法有多种，例如：</h3><blockquote><ol><li>开启绝对定位；</li><li>给父元素设置overflow：hidden；</li><li>给父元素设置内边距；</li><li>给父元素设置边框；</li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
      <tag>fixBug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack打包失败</title>
    <link href="/2022/07/30/webpack%E6%89%93%E5%8C%85%E5%A4%B1%E8%B4%A5/"/>
    <url>/2022/07/30/webpack%E6%89%93%E5%8C%85%E5%A4%B1%E8%B4%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="关于webpack打包时遇到的问题"><a href="#关于webpack打包时遇到的问题" class="headerlink" title="关于webpack打包时遇到的问题"></a>关于webpack打包时遇到的问题</h2><h3 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h3><p><img src="/img/post_img/webpack0.png"></p><h3 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h3><p><img src="/img/post_img/webpack1.png"></p><h3 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h3><blockquote><p>路径的问题，需要进入到dome1下在执行webpack命令(即webpack.config.js所在文件夹下)</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>webpack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fixBug</tag>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>v-for和v-if同时使用</title>
    <link href="/2022/07/30/v-for%E5%92%8Cv-if%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/07/30/v-for%E5%92%8Cv-if%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="关于v-for和v-if不建议同时使用的问题"><a href="#关于v-for和v-if不建议同时使用的问题" class="headerlink" title="关于v-for和v-if不建议同时使用的问题"></a>关于v-for和v-if不建议同时使用的问题</h2><blockquote><p>vue官方不建议v-for和v-if同时使用，当业务需要时可以在外层加template标签，将v-for加到template标签上</p></blockquote><p><img src="/img/post_img/vue0.png"></p>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fixBug</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>connect-mongo重用MongoDB</title>
    <link href="/2022/07/30/connect-mongo%E9%87%8D%E7%94%A8MongoDB/"/>
    <url>/2022/07/30/connect-mongo%E9%87%8D%E7%94%A8MongoDB/</url>
    
    <content type="html"><![CDATA[<h2 id="connect-mongo重用MongoDB"><a href="#connect-mongo重用MongoDB" class="headerlink" title="connect-mongo重用MongoDB"></a>connect-mongo重用MongoDB</h2><h3 id="以下是官方给出的示例"><a href="#以下是官方给出的示例" class="headerlink" title="以下是官方给出的示例"></a>以下是官方给出的示例</h3><p><img src="/img/post_img/mongo0.png"><br>关于如何创建MongoClient,这里并没有具体的方法，需要自己参考文档</p><h3 id="以下是我个人配置的方法：将clientPromise导出，然后在MongoStore-create-中引入即可"><a href="#以下是我个人配置的方法：将clientPromise导出，然后在MongoStore-create-中引入即可" class="headerlink" title="以下是我个人配置的方法：将clientPromise导出，然后在MongoStore.create()中引入即可"></a>以下是我个人配置的方法：将clientPromise导出，然后在MongoStore.create()中引入即可</h3><p><img src="/img/post_img/mongo1.png"></p>]]></content>
    
    
    <categories>
      
      <category>node</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
      <tag>connect-mongo</tag>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tag插件</title>
    <link href="/2022/07/30/fluid_tag/"/>
    <url>/2022/07/30/fluid_tag/</url>
    
    <content type="html"><![CDATA[<h2 id="1-便签"><a href="#1-便签" class="headerlink" title="1.便签"></a>1.便签</h2><blockquote><p>markdown 中加入如下的代码来使用便签：</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">note</span> success %&#125;</span><span class="language-xml"></span><br><span class="language-xml">文字 或者 `markdown` 均可</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">endnote</span> %&#125;</span><br></code></pre></td></tr></table></figure><h3 id="可选标签类型如下"><a href="#可选标签类型如下" class="headerlink" title="可选标签类型如下"></a>可选标签类型如下</h3><blockquote><p><code>primary</code> <code>secondary</code> <code>success</code> <code>danger</code> <code>warning</code> <code>info</code> <code>light</code> 更改代码中 类型即可。 <br><br>使用时 <code>&#123;% note primary %&#125; 和 &#123;% endnote %&#125;</code> 需单独一行，否则会出现问题。</p></blockquote><h4 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h4><div class="note note-success">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><div class="note note-primary">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><div class="note note-secondary">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><div class="note note-danger">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><div class="note note-warning">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><div class="note note-info">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><div class="note note-light">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><h2 id="2-行内标签"><a href="#2-行内标签" class="headerlink" title="2.行内标签"></a>2.行内标签</h2><blockquote><p>在 markdown 中加入如下的代码来使用 Label：</p></blockquote><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-template-variable">&#123;% label primary <span class="hljs-variable">@text</span> %&#125;</span><br></code></pre></td></tr></table></figure><h3 id="可选Label"><a href="#可选Label" class="headerlink" title="可选Label"></a>可选Label</h3><blockquote><p><code>primary</code> <code>default</code> <code>info</code> <code>success</code> <code>warning</code> <code>danger</code></p></blockquote><h4 id="效果如下-1"><a href="#效果如下-1" class="headerlink" title="效果如下"></a>效果如下</h4><span class="label label-primary">text</span><span class="label label-default">text</span><span class="label label-info">text</span><span class="label label-success">text</span><span class="label label-warning">text</span><span class="label label-danger">text</span><h2 id="3-勾选框"><a href="#3-勾选框" class="headerlink" title="3.勾选框"></a>3.勾选框</h2><blockquote><p>在 markdown 中加入如下的代码来使用 Checkbox：</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">cb</span> text, checked?, incline? %&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>text：显示的文字<br>checked：默认是否已勾选，默认 false<br>incline: 是否内联（可以理解为后面的文字是否换行），默认 false</p></blockquote><h4 id="效果如下-2"><a href="#效果如下-2" class="headerlink" title="效果如下"></a>效果如下</h4>            <input type="checkbox" disabled >勾选框                       <input type="checkbox" disabled checked="checked">勾选框          <h2 id="4-按钮"><a href="#4-按钮" class="headerlink" title="4.按钮"></a>4.按钮</h2><blockquote><p>你可以在 markdown 中加入如下的代码来使用 Button：</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">btn</span> url, text, title %&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>url：跳转链接<br>text：显示的文字<br>title：鼠标悬停时显示的文字（可选）</p></blockquote><h4 id="效果如下-3"><a href="#效果如下-3" class="headerlink" title="效果如下"></a>效果如下</h4><a class="btn" href="https://www.baidu.com/"  title="去搜索" target="_blank">百度</a>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo workflow</title>
    <link href="/2022/07/29/workflow/"/>
    <url>/2022/07/29/workflow/</url>
    
    <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install hexo-<span class="hljs-keyword">cli</span> -g<br></code></pre></td></tr></table></figure><h2 id="第一步-配置一键部署-修改-config-yml配置文件-实例如下"><a href="#第一步-配置一键部署-修改-config-yml配置文件-实例如下" class="headerlink" title="第一步:配置一键部署,修改_config.yml配置文件,实例如下"></a>第一步:配置一键部署,修改<code>_config.yml</code>配置文件,实例如下</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://令牌@仓库地址</span><br></code></pre></td></tr></table></figure><h2 id="第二步-安装自动发布到github上的插件"><a href="#第二步-安装自动发布到github上的插件" class="headerlink" title="第二步:安装自动发布到github上的插件"></a>第二步:安装自动发布到github上的插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h2 id="第三步-创建新的文章"><a href="#第三步-创建新的文章" class="headerlink" title="第三步:创建新的文章"></a>第三步:创建新的文章</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new 文章标题<br></code></pre></td></tr></table></figure><h2 id="第四步-使用markdown编辑"><a href="#第四步-使用markdown编辑" class="headerlink" title="第四步:使用markdown编辑"></a>第四步:使用markdown编辑</h2><h2 id="第五步-一键部署"><a href="#第五步-一键部署" class="headerlink" title="第五步:一键部署"></a>第五步:一键部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate --deploy<br>or<br>hexo deploy --generate<br></code></pre></td></tr></table></figure><h3 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g -d<br>or<br>hexo d -g<br></code></pre></td></tr></table></figure><h3 id="插入图片测试"><a href="#插入图片测试" class="headerlink" title="插入图片测试"></a>插入图片测试</h3><p><img src="/img/ykls1.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git入门</title>
    <link href="/2022/07/29/Git%E5%85%A5%E9%97%A8/"/>
    <url>/2022/07/29/Git%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h2><h3 id="最最最常用"><a href="#最最最常用" class="headerlink" title="最最最常用"></a>最最最常用</h3><blockquote><p><code>git init</code> <code>git clone</code> <code>git status</code> <code>git add</code> <code>git commit</code> <code>git push</code> <code>git pull</code></p></blockquote><h2 id="1-新建仓库"><a href="#1-新建仓库" class="headerlink" title="1.新建仓库"></a>1.新建仓库</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">git init <span class="hljs-regexp">//</span>初始化仓库<br><br>git init 仓库名称 <span class="hljs-regexp">//</span>新建并初始化仓库<br><br>git clone [url] <span class="hljs-regexp">//</span>下载已有项目(包含历史版本，如果只克隆包含最近的一次commit的一个分支的话，<br>可以加 --depth=<span class="hljs-number">1</span>，下载体积会相对减小)<br></code></pre></td></tr></table></figure><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> --list <span class="hljs-comment">//查看git配置信息</span><br><br>git <span class="hljs-keyword">config</span> -e [--<span class="hljs-keyword">global</span>] <span class="hljs-comment">//编辑git配置文件</span><br><br>git <span class="hljs-keyword">config</span> [--<span class="hljs-keyword">global</span>] user<span class="hljs-variable">.name</span> <span class="hljs-string">&quot;[name]&quot;</span> <span class="hljs-comment">//设置用户名</span><br><br>git <span class="hljs-keyword">config</span> [--<span class="hljs-keyword">global</span>] user<span class="hljs-variable">.email</span> <span class="hljs-string">&quot;[email address]&quot;</span> <span class="hljs-comment">//设置用户邮箱</span><br></code></pre></td></tr></table></figure><h2 id="3-增加-x2F-删除文件"><a href="#3-增加-x2F-删除文件" class="headerlink" title="3.增加&#x2F;删除文件"></a>3.增加&#x2F;删除文件</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> <span class="hljs-keyword">add</span> [file1] [file2] ... <span class="hljs-comment">// 添加指定文件到暂存区</span><br><span class="hljs-symbol">git</span> <span class="hljs-keyword">add</span> [dir] <span class="hljs-comment">// 添加指定目录到暂存区，包括子目录</span><br><span class="hljs-symbol">git</span> <span class="hljs-keyword">add</span> ./  <span class="hljs-comment">// 添加当前目录的所有文件到暂存区</span><br></code></pre></td></tr></table></figure><h3 id="以下使用较少一些"><a href="#以下使用较少一些" class="headerlink" title="以下使用较少一些"></a>以下使用较少一些</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">git rm <span class="hljs-selector-attr">[file1]</span> <span class="hljs-selector-attr">[file2]</span> ... <span class="hljs-comment">//删除工作区文件，并且将这次删除放入暂存区</span><br>git rm <span class="hljs-attr">--cached</span> <span class="hljs-selector-attr">[file]</span> <span class="hljs-comment">//停止追踪指定文件，但该文件会保留在工作区</span><br>git mv <span class="hljs-selector-attr">[file-original]</span> <span class="hljs-selector-attr">[file-renamed]</span><br></code></pre></td></tr></table></figure><h2 id="4-代码提交"><a href="#4-代码提交" class="headerlink" title="4.代码提交"></a>4.代码提交</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git commit -m <span class="hljs-selector-attr">[message]</span> <span class="hljs-comment">//提交暂存区到仓库区</span><br><br>git commit <span class="hljs-selector-attr">[file1]</span> <span class="hljs-selector-attr">[file2]</span> ... -m <span class="hljs-selector-attr">[message]</span> <span class="hljs-comment">//提交暂存区的指定文件到仓库区</span><br><br> <br>git commit -<span class="hljs-selector-tag">a</span> <span class="hljs-comment">//提交工作区自上次commit之后的变化，直接到仓库区(跳过暂存区)</span><br><br> <br>git commit <span class="hljs-attr">--amend</span> -m <span class="hljs-selector-attr">[message]</span>  <span class="hljs-comment">//使用一次新的commit，替代上一次提交 </span><br><span class="hljs-comment">//如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br> <br>git commit <span class="hljs-attr">--amend</span> <span class="hljs-selector-attr">[file1]</span> <span class="hljs-selector-attr">[file2]</span> ... <span class="hljs-comment">//重做上一次commit，并包括指定文件的新变化</span><br></code></pre></td></tr></table></figure><h2 id="5-分支"><a href="#5-分支" class="headerlink" title="5.分支"></a>5.分支</h2><div class="note note-success">            <p>以下的[commit]代表git的版本号，为hash值</p>          </div><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git branch <span class="hljs-comment">//列出所有本地分支</span><br><br>git branch -r <span class="hljs-comment">//列出所有远程分支</span><br><br>git branch -<span class="hljs-selector-tag">a</span> <span class="hljs-comment">//列出所有本地分支和远程分支</span><br><br>git branch <span class="hljs-selector-attr">[branch-name]</span>  <span class="hljs-comment">//新建一个分支，但依然停留在当前分支</span><br><br>git checkout -<span class="hljs-selector-tag">b</span> <span class="hljs-selector-attr">[branch]</span> <span class="hljs-comment">//新建一个分支，并切换到该分支</span><br><br>git branch <span class="hljs-selector-attr">[branch]</span> <span class="hljs-selector-attr">[commit]</span> <span class="hljs-comment">//新建一个分支，指向指定commit</span><br><br>git branch <span class="hljs-attr">--track</span> <span class="hljs-selector-attr">[branch]</span> <span class="hljs-selector-attr">[remote-branch]</span> <span class="hljs-comment">//新建一个分支，与指定的远程分支建立追踪关系</span><br><br>git checkout <span class="hljs-selector-attr">[branch-name]</span>  /切换到指定分支，并更新工作区<br><br>git checkout -  <span class="hljs-comment">//切换到上一个分支</span><br><br>git branch <span class="hljs-attr">--set-upstream</span> <span class="hljs-selector-attr">[branch]</span> <span class="hljs-selector-attr">[remote-branch]</span> <span class="hljs-comment">//建立追踪关系，在现有分支与指定的远程分支之间</span><br><br>git merge <span class="hljs-selector-attr">[branch]</span>  <span class="hljs-comment">//合并指定分支到当前分支</span><br><br>git cherry-pick <span class="hljs-selector-attr">[commit]</span> <span class="hljs-comment">//选择一个commit，合并进当前分支</span><br><br>git branch -d <span class="hljs-selector-attr">[branch-name]</span> <span class="hljs-comment">//删除分支</span><br><br>git push origin <span class="hljs-attr">--delete</span> <span class="hljs-selector-attr">[branch-name]</span>  <span class="hljs-comment">//删除远程分支</span><br>git branch -dr <span class="hljs-selector-attr">[remote/branch]</span><br></code></pre></td></tr></table></figure><h2 id="6-标签"><a href="#6-标签" class="headerlink" title="6.标签"></a>6.标签</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">tag</span> <span class="hljs-title">//列出所有tag</span><br><br>git <span class="hljs-keyword">tag</span> <span class="hljs-title">[tag</span>] //新建一个<span class="hljs-keyword">tag</span>在当前commit<br><br>git <span class="hljs-keyword">tag</span> <span class="hljs-title">[tag</span>] [commit] //新建一个<span class="hljs-keyword">tag</span>在指定commit<br><br>git <span class="hljs-keyword">tag</span> <span class="hljs-title">-d</span> [<span class="hljs-keyword">tag</span>] //删除本地<span class="hljs-keyword">tag</span><br><br><span class="hljs-title">git</span> push origin :refs/tags/[tagName] //删除远程<span class="hljs-keyword">tag</span><br><br><span class="hljs-title">git</span> show [<span class="hljs-keyword">tag</span>] //查看<span class="hljs-keyword">tag</span>信息<br></code></pre></td></tr></table></figure><h2 id="7-查看信息"><a href="#7-查看信息" class="headerlink" title="7.查看信息"></a>7.查看信息</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">git status <span class="hljs-regexp">//</span>显示有变更的文件<br><br>git log <span class="hljs-regexp">//</span>显示当前分支的版本历史<br><br>git log --stat <span class="hljs-regexp">//</span>显示commit历史，以及每次commit发生变更的文件<br><br>git log -S [keyword] <span class="hljs-regexp">//</span>搜索提交历史，根据关键词<br><br>git log --oneline --decorate --graph --all <span class="hljs-regexp">//</span>查看分支图<br><span class="hljs-regexp">//</span> --oneline 日志单行显示<br><span class="hljs-regexp">//</span> --graph分支图显示<br><span class="hljs-regexp">//</span> --decorate 可显示分支名称<br><span class="hljs-regexp">//</span> --all显示所有分支<br></code></pre></td></tr></table></figure><h2 id="8-远程同步"><a href="#8-远程同步" class="headerlink" title="8.远程同步"></a>8.远程同步</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">fetch</span> <span class="hljs-selector-attr">[remote]</span> <span class="hljs-comment">//下载远程仓库的所有变动</span><br><br><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">remote</span> <span class="hljs-selector-tag">-v</span> <span class="hljs-comment">//显示所有远程仓库</span><br><br><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">remote</span> <span class="hljs-selector-tag">show</span> <span class="hljs-selector-attr">[remote]</span> <span class="hljs-comment">//显示某个远程仓库的信息</span><br><br><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">remote</span> <span class="hljs-selector-tag">add</span> <span class="hljs-selector-attr">[shortname]</span> <span class="hljs-selector-attr">[url]</span> <span class="hljs-comment">//增加一个新的远程仓库，并命名</span><br><br><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">pull</span> <span class="hljs-selector-attr">[remote]</span> <span class="hljs-selector-attr">[branch]</span> <span class="hljs-comment">//取回远程仓库的变化，并与本地分支合并</span><br><br><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">push</span> <span class="hljs-selector-attr">[remote]</span> <span class="hljs-selector-attr">[branch]</span> <span class="hljs-comment">//上传本地指定分支到远程仓库</span><br></code></pre></td></tr></table></figure><h3 id="关于git-fetch-和-git-pull"><a href="#关于git-fetch-和-git-pull" class="headerlink" title="关于git fetch 和 git pull"></a>关于git fetch 和 git pull</h3><blockquote><p>笼统的来说<code>git pull</code>约等于<code>git fetch</code>+<code>git merge</code>。<br>区别在于<code>git fetch</code>之后需要<code>git log -p FETCH_HEAD</code>来查看差异，然后通过<code>git merge FETCH_HEAD</code>合并，而<code>git pull</code>会将代码直接合并，造成冲突后需要手动解决。<br>了解更多关于git fetch <a href="https://www.cnblogs.com/runnerjack/p/9342362.html">git fetch详解</a>。</p></blockquote><h2 id="9-撤销"><a href="#9-撤销" class="headerlink" title="9.撤销"></a>9.撤销</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scss">git checkout <span class="hljs-selector-attr">[file]</span> <span class="hljs-comment">//恢复暂存区的指定文件到工作区</span><br><br>git checkout <span class="hljs-selector-attr">[commit]</span> <span class="hljs-selector-attr">[file]</span> <span class="hljs-comment">//恢复某个commit的指定文件到暂存区和工作区</span><br><br>git checkout . <span class="hljs-comment">//恢复暂存区的所有文件到工作区</span><br><br>git reset <span class="hljs-selector-attr">[file]</span> <span class="hljs-comment">//重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><br>git reset <span class="hljs-attr">--hard</span> <span class="hljs-comment">//重置暂存区与工作区，与上一次commit保持一致</span><br><br>git reset <span class="hljs-selector-attr">[commit]</span> <span class="hljs-comment">//重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><br>git reset <span class="hljs-attr">--hard</span> <span class="hljs-selector-attr">[commit]</span> <span class="hljs-comment">//重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><br>git reset <span class="hljs-attr">--keep</span> <span class="hljs-selector-attr">[commit]</span> <span class="hljs-comment">//重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br></code></pre></td></tr></table></figure><h2 id="查看更多"><a href="#查看更多" class="headerlink" title="查看更多"></a>查看更多</h2><p><a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">git 常用命令</a><br><a href="https://www.ruanyifeng.com/blog/2012/07/git.html">git分支管理策略</a><br><a href="https://www.ruanyifeng.com/blog/2015/12/git-workflow.html">git工作流程</a></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>First Blog</title>
    <link href="/2022/07/29/first_blog/"/>
    <url>/2022/07/29/first_blog/</url>
    
    <content type="html"><![CDATA[<h2 id="第一次使用hexo"><a href="#第一次使用hexo" class="headerlink" title="第一次使用hexo"></a>第一次使用hexo</h2><blockquote><p>之前了解过一些快速搭建静态博客的方法，例如hexo，wordpress等。<br>但是一直没有实际动手操作。因为我当初可能想的是自己从零开始写前端，后端，然后发布到自己的服务上，相关技术也花了一些时间去了解，但是感觉自己当前技术栈不够深，还是先继续学习，然后把这项计划规划到毕设上，这样比较稳妥一些，也能做出更好的作品，强迫症患者的偏执（恼）。</p></blockquote><blockquote><p>之前的记录都发布到了博客园上，最近准备迁移过来，可能要花一些时间。</p></blockquote><p>More info: <a href="https://home.cnblogs.com/u/burnedWings">我的博客园</a></p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>寄语</tag>
      
      <tag>first_blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
